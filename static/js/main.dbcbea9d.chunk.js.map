{"version":3,"sources":["components/Header.jsx","components/WeatherInput.jsx","components/DispWeather.jsx","components/MainContent.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","rel","WeatherInput","onSubmit","this","props","test","type","name","value","input","id","onChange","placeholder","autoComplete","Component","DispWeather","src","img","alt","weather","main","country","MainContent","state","sys","alert","cond","icon","dt","handleChange","bind","getWeather","e","setState","fetch","then","res","json","data","console","log","catch","preventDefault","Date","toLocaleTimeString","sunrise","toUTCString","Math","floor","temp","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dbcbea9d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return(\r\n        <div className=\"Header\">\r\n            <h1>Weather App</h1>\r\n            <a href=\"https://realtechnerd.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">By Nithil Krishnaraj</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport \"./style.css\";\r\n\r\nclass WeatherInput extends Component {\r\n    render() {\r\n        return ( \r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"Weather\">\r\n                        <form onSubmit={this.props.test}>\r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"input\"\r\n                                value={this.props.input} \r\n                                id=\"weatherInput\"\r\n                                onChange={this.props.onChange}\r\n                                placeholder=\"Enter a city..\"\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <br/>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default WeatherInput;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction DispWeather(props) {\r\n    return(\r\n        <div className=\"smallContainer\">\r\n            <div className=\"DispWeather\" id=\"disp\">\r\n                <img src={\"http://openweathermap.org/img/wn/\" + props.img + \"@2x.png\"} alt={props.img} id=\"img\"/>\r\n                <h5>{props.weather}</h5>\r\n                <h1 id=\"temp\">{props.main}&#730;</h1>\r\n                <h5>{props.name}, {props.country}.</h5>\r\n            </div>\r\n            <h1 id=\"ver\">version 0.0.1 - more updates to come :)</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DispWeather;","import React from 'react';\r\nimport WeatherInput from \"./WeatherInput.jsx\";\r\nimport \"./style.css\";\r\nimport DispWeather from \"./DispWeather.jsx\";\r\n\r\nclass MainContent extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n           input: \"London\",\r\n            main: {},\r\n            sys: {},\r\n            weather: \"\",\r\n            name: \"\",\r\n            alert: \"\",\r\n            cond: false,\r\n            icon: \"\",\r\n            dt: 0\r\n            \r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.getWeather = this.getWeather.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        const {name, value} = e.target;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        fetch(\"https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=London&units=imperial&appid=ea6d4788c2440f3f6ddce67043b19eb3\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                this.setState({ main: data.main, sys: data.sys, name:data.name, weather:data.weather[0], dt: data.dt, cond: true });\r\n            })\r\n            .catch(\r\n                this.setState({\r\n                    alert: \"Please enter a valid city.\"\r\n                })\r\n            );\r\n    }\r\n    getWeather(e) {\r\n        fetch(\"https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=\"+ this.state.input +\"&units=imperial&appid=ea6d4788c2440f3f6ddce67043b19eb3\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                this.setState({ main: data.main, sys: data.sys, name:data.name, weather:data.weather[0], dt: data.dt, cond: true });\r\n            })\r\n            .catch(\r\n                this.setState({\r\n                    alert: \"Please enter a valid city.\"\r\n                })\r\n            );\r\n\r\n            e.preventDefault();\r\n    }\r\n    render() { \r\n        const dt = new Date(this.state.dt * 1000);\r\n        const d = dt.toLocaleTimeString();\r\n        const dt1 = new Date(this.state.sys.sunrise * 1000);\r\n        const d1 = dt1.toUTCString();\r\n        return ( \r\n            <div className=\"MainContent\">\r\n                <WeatherInput test={this.getWeather} input={this.state.input} onChange={this.handleChange}/>\r\n                <br/>\r\n                <DispWeather \r\n                    img={this.state.weather.icon}\r\n                    main={Math.floor(this.state.main.temp)} \r\n                    name={this.state.name} \r\n                    country={this.state.sys.country} \r\n                    weather={this.state.weather.main} \r\n                />\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default MainContent;","import React from 'react';\nimport Header from \"./components/Header.jsx\";\nimport MainContent from \"./components/MainContent\";\nimport \"./components/style.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <MainContent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}